name: Ejecución Programada del Scraper

on:
  schedule:
    # Ejecutar a las 8:00, 14:00 y 20:00 UTC (9:00, 15:00 y 21:00 en horario de verano español)
    - cron: '0 6,12,18 * * *'
  workflow_dispatch:  # Permite ejecutar manualmente

jobs:
  scrape-and-upload:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v3
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Instalar dependencias
      run: |
        echo "=== Información del sistema ==="
        uname -a
        python --version
        pip --version
        
        echo "\n=== Contenido del directorio ==="
        ls -la
        
        echo "\n=== Contenido de requirements_competitors.txt ==="
        cat requirements_competitors.txt
        
        echo "\n=== Instalando dependencias ==="
        python -m pip install --upgrade pip
        pip install newspaper3k==0.2.8
        pip install -r requirements_competitors.txt
        pip install gdown
        
        echo "\n=== Dependencias instaladas ==="
        pip list
    
    - name: Crear directorios necesarios
      run: |
        # Crear directorios necesarios con permisos completos
        echo "=== Creando directorios con permisos completos ==="
        mkdir -p output/competitors
        mkdir -p automation/logs
        
        # Asegurar permisos completos
        chmod -R 777 output automation/logs
        
        # Verificar directorios
        echo "\n=== Directorios creados: ==="
        ls -la
        ls -la automation/
        
        echo "\n=== Permisos de logs: ==="
        ls -ld automation/logs
        ls -la automation/logs/ 2>/dev/null || echo "No se pudo listar automation/logs/"
        
        # Crear archivo de log vacío para asegurar permisos
        touch automation/logs/scraper_automation.log
        chmod 666 automation/logs/scraper_automation.log
        
        echo "\n=== Verificando permisos de escritura ==="
        echo "Test de escritura" > automation/logs/test_write.log 2>&1 && echo "Escritura exitosa" || echo "Error de escritura"
        ls -la automation/logs/ 2>/dev/null || echo "No se pudo listar automation/logs/ después de prueba de escritura"
        
    - name: Ejecutar scraper
      env:
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        PYTHONUNBUFFERED: "1"
      run: |
        # Verificación básica del entorno
        echo "=== INICIO DE EJECUCIÓN ==="
        pwd
        whoami
        groups
        
        # Verificar directorios
        echo -e "\n=== VERIFICACIÓN DE DIRECTORIOS ==="
        ls -la
        
        # Asegurar que el directorio de logs exista
        mkdir -p automation/logs
        chmod 777 -R automation/logs
        
        # Verificar permisos
        echo -e "\n=== PRUEBA DE ESCRITURA ==="
        TEST_FILE="automation/logs/test_$(date +%s).log"
        if echo "test" > "$TEST_FILE"; then
          echo "✓ Escritura exitosa en $TEST_FILE"
          ls -l "$TEST_FILE"
        else
          echo "✗ Error al escribir en $TEST_FILE"
          # Intentar con directorio temporal si falla
          TEMP_LOG_DIR="/tmp/news-scraper-logs"
          mkdir -p "$TEMP_LOG_DIR"
          chmod 777 "$TEMP_LOG_DIR"
          TEST_FILE="$TEMP_LOG_DIR/test_$(date +%s).log"
          if echo "test" > "$TEST_FILE"; then
            echo "✓ Escritura exitosa en $TEST_FILE"
            export LOG_DIR="$TEMP_LOG_DIR"
          else
            echo "✗ Error crítico: No se pudo escribir en ningún directorio"
            exit 1
          fi
        fi
        
        # Ejecutar el script principal
        echo -e "\n=== EJECUTANDO SCRAPER ==="
        python automation/run_automation.py 2>&1 | tee logs/script_output.log
        SCRIPT_EXIT_CODE=${PIPESTATUS[0]}
        
        # Mostrar logs
        echo -e "\n=== ÚLTIMAS 50 LÍNEAS DEL LOG ==="
        LOG_FILE="${LOG_DIR:-automation/logs}/scraper_automation.log"
        if [ -f "$LOG_FILE" ]; then
          tail -n 50 "$LOG_FILE"
        else
          echo "No se pudo encontrar el archivo de log en $LOG_FILE"
          echo "Buscando archivos de log..."
          find . -name "*.log" -type f -exec echo "=== Encontrado: {}" \; -exec head -n 5 {} \;
        fi
        
        # Comprimir resultados si la ejecución fue exitosa
        if [ $SCRIPT_EXIT_CODE -eq 0 ]; then
          echo -e "\n=== COMPRIMIENDO RESULTADOS ==="
          mkdir -p output/competitors
          tar -czf news_export_$(date +%Y%m%d_%H%M%S).tar.gz output/competitors/*.csv 2>/dev/null || echo "No se encontraron archivos CSV"
          
          echo -e "\n=== ARCHIVOS GENERADOS ==="
          find output -type f | sort
        else
          echo -e "\n✗ EL SCRIPT FALLÓ CON CÓDIGO $SCRIPT_EXIT_CODE"
          tail -n 50 logs/script_output.log 2>/dev/null || echo "No se pudo leer el archivo de salida"
          exit $SCRIPT_EXIT_CODE
        fi
    
    - name: Configurar Git
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
    
    - name: Commit y Push de logs
      run: |
        git add logs/
        git diff --quiet && git diff --staged --quiet || \
        (git commit -m "Actualización automática de logs" && \
         git push origin $GITHUB_REF) || echo "No hay cambios en los logs"
